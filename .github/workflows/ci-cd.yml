# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit flake8
    
    - name: Run tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml --junitxml=test-results.xml tests/
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results.xml
          coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install flake8 radon
    
    - name: Run Flake8 linting
      run: |
        flake8 . --exit-zero --format=json > flake8-report.json || true
    
    - name: Run Radon complexity analysis
      run: |
        radon cc . -j -O radon-complexity.json || true
        radon mi . -j -O radon-maintainability.json || true
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          flake8-report.json
          radon-complexity.json
          radon-maintainability.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t static-analysis-demo:${{ github.sha }} .
        docker build -t static-analysis-demo:latest .
    
    - name: Test Docker container
      run: |
        docker run -d -p 5000:5000 --name test-container static-analysis-demo:latest
        sleep 10
        
        # Health check
        curl --retry 5 --retry-delay 5 --retry-max-time 30 http://localhost:5000/health
        
        # Stop container
        docker stop test-container
        docker rm test-container
    
    - name: Save Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          Dockerfile
          requirements.txt

  deploy-notification:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify success
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo "📊 All tests passed"
        echo "🔍 Security scan completed"
        echo "📝 Code quality checks passed"
        echo "🐳 Docker image built and tested"
        echo "🚀 Ready for deployment"
